---
alwaysApply: true
---

# Estructura del Proyecto

Este es un monorepo que contiene una aplicación completa con Backend (Express + TypeScript) y Frontend (Flutter).

## Organización General

```
app_cuatri/
├── packages/
│   ├── backend/          # API REST con Express y TypeScript
│   └── frontend/         # Aplicación móvil con Flutter
```

## Backend (packages/backend)

El backend está organizado siguiendo una arquitectura en capas:

- **[src/index.ts](mdc:packages/backend/src/index.ts)**: Punto de entrada principal del servidor Express
- **[src/config/](mdc:packages/backend/src/config/)**: Configuraciones (database, env, multer)
- **[src/controllers/](mdc:packages/backend/src/controllers/)**: Lógica de controladores
- **[src/middlewares/](mdc:packages/backend/src/middlewares/)**: Middlewares (errorHandler, logger, validator, upload)
- **[src/models/](mdc:packages/backend/src/models/)**: Modelos y tipos TypeScript
- **[src/routes/](mdc:packages/backend/src/routes/)**: Definición de rutas
- **[src/validators/](mdc:packages/backend/src/validators/)**: Validadores con express-validator
- **[src/utils/](mdc:packages/backend/src/utils/)**: Utilidades (pagination, etc.)
- **[prisma/schema.prisma](mdc:packages/backend/prisma/schema.prisma)**: Esquema de base de datos Prisma
- **uploads/**: Carpeta para archivos subidos (no versionada)

### Stack Técnico Backend

- Express.js + TypeScript
- Prisma ORM con SQLite
- express-validator para validaciones
- Multer para upload de archivos
- Pino para logging
- Helmet + CORS para seguridad

## Frontend (packages/frontend)

Aplicación Flutter con la siguiente estructura:

- **[lib/main.dart](mdc:packages/frontend/lib/main.dart)**: Punto de entrada de la app
- **[lib/models/](mdc:packages/frontend/lib/models/)**: Modelos de datos
- **[lib/providers/](mdc:packages/frontend/lib/providers/)**: Gestión de estado
- **[lib/screens/](mdc:packages/frontend/lib/screens/)**: Pantallas de la app
- **[lib/services/](mdc:packages/frontend/lib/services/)**: Servicios (API, etc.)
- **[lib/widgets/](mdc:packages/frontend/lib/widgets/)**: Widgets reutilizables
- **[lib/utils/constants.dart](mdc:packages/frontend/lib/utils/constants.dart)**: Constantes globales

### Stack Técnico Frontend

- Flutter SDK ^3.9.2
- Dart
- Material Design

## Flujo de Trabajo

1. El backend expone una API REST en `/api/*`
2. El frontend Flutter consume la API usando HTTP/Dio
3. La base de datos SQLite se gestiona con Prisma
4. Los archivos subidos se sirven estáticamente desde `/uploads`

## Comandos Importantes

### Backend
```bash
cd packages/backend
npm run dev              # Desarrollo con hot-reload
npm run build            # Compilar TypeScript
npm run prisma:migrate   # Ejecutar migraciones
npm run prisma:studio    # Abrir Prisma Studio
```

### Frontend
```bash
cd packages/frontend
flutter run              # Ejecutar en emulador/dispositivo
flutter build apk        # Compilar APK
```

## Variables de Entorno

El backend requiere un archivo `.env` en `packages/backend/`:
```
NODE_ENV=development
PORT=3000
DATABASE_URL="file:./prisma/dev.db"
```

## Convenciones

- **Backend**: Siempre usar TypeScript estricto
- **Frontend**: Seguir guías de estilo de Flutter
- **API**: Todas las respuestas usan formato estandarizado de [ApiResponse](mdc:packages/backend/src/models/ApiResponse.ts)
- **Base de datos**: Todas las modificaciones del esquema deben hacerse vía migraciones de Prisma
